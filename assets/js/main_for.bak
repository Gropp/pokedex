//cria uma funcao que retorna o html da lista com as informacoes do fetch
function convertePokemonToLi(pokemon) {
    //USA CRASE
    //debugger
    // Nao pode deixar o return sozinho na linha, da erro de undefined!!!
    return `
        <li class="pokemon">
            <span class="number">#001</span>
            <span class="name">${pokemon.name}</span>
            <div class="detail">
                <ol class="types">
                    <li class="type">grass</li>
                    <li class="type">poison</li>
                </ol>
                <img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/1.svg" alt="${pokemon.name}">
            </div>
        </li>
    `
}

// colocamos em uma constante o alvo onde queremos colocar os cards dos pokemosn
const pokemonLi = document.getElementById('pokemonList')

//chamamos a funcao que faz a conexao com a API e tratamos com um .then novamente o formato dessa lista
//no then poe por default uma lista vazia, para em caso de nao vir nada, a lista vazia é recebida e nao da erro
pokeApi.getPokemons().then((pokemonList = []) => {

    // o map retorna value, index, array
    // o map substitui o fot
    const newList = pokemonList.map((pokemon) => {
        return convertePokemonToLi(pokemon)
    })
    
    // O join junta todos os elentos da lista
    const newHtml = newList.join(' ')
    pokemonLi.innerHTML += newHtml


    //debugger
    //cria um array
    // const listaItens = []
    // for (let i=0; i < pokemonList.length; i++){
    //     const pokemon = pokemonList[i];
    //     faz um apend dos pokemos e o HTML na lista (array)
    //     converte o objeto em um array com os codigos pronto
    //     listaItens.push(convertePokemonToLi(pokemon))
    //     adiciona mais
    //     adicionar a lista com concatenação do HTML não é uma boa prática
    //     pokemonLi.innerHTML += convertePokemonToLi(pokemon)
    // }
    // console.log(listaItens)
})
  
